//
//  StoryDetailPresenter.swift
//  TopStories
//
//  Created by Mozhgan on 9/5/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation

final class StoryDetailPresenter {

    // MARK: - Private properties -

    private unowned let view: StoryDetailViewInterface
    private let formatter: StoryDetailFormatterInterface
    private let interactor: StoryDetailInteractorInterface
    private let wireframe: StoryDetailWireframeInterface
    private weak var moudleDelegate: StoryDetailMoudleDelegate?

    // MARK: - Lifecycle -

    init(
        view: StoryDetailViewInterface,
        formatter: StoryDetailFormatterInterface,
        interactor: StoryDetailInteractorInterface,
        wireframe: StoryDetailWireframeInterface,
        moudleDelegate: StoryDetailMoudleDelegate?
    ) {
        self.view = view
        self.formatter = formatter
        self.interactor = interactor
        self.wireframe = wireframe
        self.moudleDelegate = moudleDelegate
    }
}

// MARK: - Extensions -

extension StoryDetailPresenter: StoryDetailPresenterInterface {
    func bookmark() {
        self.interactor.toggleBookmark()
        self.moudleDelegate?.isBookmarked(url: self.storyViewModel.url, value: self.storyViewModel.isBookmarked)
        self.view.didChangedBookmarked()
    }
    
    var storyViewModel: StoryViewModel {
        self.formatter.format(story: self.interactor.stroy, isBookmarked: self.interactor.isBookMarked)
    }
    func moreInfoPressed() {
        guard let url = self.formatter.make(url: self.storyViewModel.url) else {
            return
        }
        wireframe.present(url: url)
    }
}
