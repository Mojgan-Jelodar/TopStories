//
//  StoryDetailViewController.swift
//  TopStories
//
//  Created by Mozhgan on 9/5/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

final class StoryDetailViewController: UIViewController {
    
    deinit {
        print("deinit :: \(self)")
    }
    
    // MARK: - Private properties -
    
    private lazy var scrollView: UIScrollView = {
        let scrollView = UIScrollView()
        scrollView.showsHorizontalScrollIndicator = false
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        return scrollView
    }()
    
    private lazy var titleLabel : UILabel = {
        let titleLabel = UILabel()
        titleLabel.font = .systemFont(ofSize: titleLabel.font.pointSize, weight: .semibold)
        titleLabel.numberOfLines = .zero
        titleLabel.lineBreakMode = .byWordWrapping
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        titleLabel.text = self.presenter.storyViewModel.title
        return titleLabel
    }()
    
    private lazy var decriptionLabel : UILabel = {
        let decriptionLabel = UILabel()
        decriptionLabel.font = .systemFont(ofSize: decriptionLabel.font.pointSize, weight: .semibold)
        decriptionLabel.numberOfLines = .zero
        decriptionLabel.lineBreakMode = .byWordWrapping
        decriptionLabel.translatesAutoresizingMaskIntoConstraints = false
        decriptionLabel.text = self.presenter.storyViewModel.description
        return decriptionLabel
    }()
    private lazy var dateLabel : UILabel = {
        let dateLabel = UILabel()
        dateLabel.font = .systemFont(ofSize: dateLabel.font.pointSize, weight: .medium)
        dateLabel.numberOfLines = .zero
        dateLabel.lineBreakMode = .byWordWrapping
        dateLabel.text = self.presenter.storyViewModel.date
        dateLabel.translatesAutoresizingMaskIntoConstraints = false
        return dateLabel
    }()
    
    private lazy var showMoreButton : UIButton = {
        let showMoreButton = UIButton()
        showMoreButton.addTarget(self, action: #selector(moreInfoPressed), for: .touchUpInside)
        showMoreButton.setTitle(Strings.StoryDetail.moreInfoTitle, for: .normal)
        showMoreButton.contentHorizontalAlignment = .leading
        return showMoreButton
    }()
    
    private lazy var contentViewStack : UIStackView = {
        let contentViewStack = UIStackView()
        contentViewStack.axis = .vertical
        contentViewStack.spacing = Layout.spacing8
        contentViewStack.translatesAutoresizingMaskIntoConstraints = false
        return contentViewStack
    }()
    
    private lazy var coverView : UIImageView = {
        let coverView = UIImageView()
        coverView.translatesAutoresizingMaskIntoConstraints = false
        coverView.backgroundColor = .lightGray
        coverView.contentMode = .scaleAspectFit
        coverView.clipsToBounds = true
        coverView.loadImageFrom(urlString: self.presenter.storyViewModel.cover?.url ?? "")
        return coverView
    }()
    
    private lazy var contentView: UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    private lazy var bookMarkButton : UIBarButtonItem =  {
        let bookMarkButton = UIBarButtonItem(barButtonSystemItem: .bookmarks,
                                             target: self,
                                             action: #selector(bookmarkTapped))
        bookMarkButton.tintColor = presenter.storyViewModel.isBookmarked ? .red : .blue
        return bookMarkButton
    }()
    
    @objc func bookmarkTapped() {
        presenter.bookmark()
    }
    
    // MARK: - Public properties -
    
    var presenter: StoryDetailPresenterInterface!
    
    // MARK: - Lifecycle -
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.setupViews()
    }
    
    override func loadView() {
        super.loadView()
        if #available(iOS 13.0, *) {
            self.view.backgroundColor = .systemBackground
        } else {
            self.view.backgroundColor = .white
        }
    }
    
    @objc func moreInfoPressed() {
        presenter.moreInfoPressed()
    }
    
    // MARK: - Setup View -
    private func setupViews() {
        self.title = Strings.StoryListView.pageTitle
        self.navigationItem.rightBarButtonItem = self.bookMarkButton
        view.addSubview(scrollView)
        scrollView.addSubview(contentView)
        contentView.addSubview(contentViewStack)
        contentViewStack.addArrangedSubview(coverView)
        contentViewStack.addArrangedSubview(titleLabel)
        contentViewStack.addArrangedSubview(dateLabel)
        contentViewStack.addArrangedSubview(decriptionLabel)
        contentViewStack.addArrangedSubview(showMoreButton)
        setConstraints(parent: view.safeAreaLayoutGuide)
    }
    private func setConstraints(parent : UILayoutGuide) {
        setupScrollViewConstraints(parent: parent)
        setupContentViewConstraints(parent: scrollView)
        setupStackViewConstraints(parent: contentView)
        setupCoverViewConstraints(parent: contentViewStack)
    }
    
    private func setupScrollViewConstraints(parent : UILayoutGuide) {
        scrollView.topAnchor.constraint(equalTo: parent.topAnchor).isActive = true
        scrollView.leadingAnchor.constraint(equalTo: parent.leadingAnchor).isActive = true
        scrollView.trailingAnchor.constraint(equalTo: parent.trailingAnchor).isActive = true
        scrollView.bottomAnchor.constraint(equalTo: parent.bottomAnchor).isActive = true
    }
    
    private func setupContentViewConstraints(parent : UIView) {
        contentView.topAnchor.constraint(equalTo: parent.topAnchor).isActive = true
        contentView.leadingAnchor.constraint(equalTo: parent.leadingAnchor).isActive = true
        contentView.trailingAnchor.constraint(equalTo: parent.trailingAnchor).isActive = true
        contentView.bottomAnchor.constraint(equalTo: parent.bottomAnchor).isActive = true
        contentView.widthAnchor.constraint(equalTo: parent.widthAnchor).isActive = true
    }
    
    private func setupStackViewConstraints(parent : UIView) {
        contentViewStack.topAnchor.constraint(equalTo: parent.topAnchor).isActive = true
        contentViewStack.leadingAnchor.constraint(equalTo: parent.leadingAnchor).isActive = true
        contentViewStack.trailingAnchor.constraint(equalTo: parent.trailingAnchor).isActive = true
        contentViewStack.bottomAnchor.constraint(equalTo: parent.bottomAnchor).isActive = true
    }
    
    private func setupCoverViewConstraints(parent : UIView) {
        coverView.widthAnchor.constraint(equalTo: parent.widthAnchor).isActive = true
        coverView.heightAnchor.constraint(equalTo: coverView.widthAnchor, multiplier: 1.0 / (presenter.storyViewModel.cover?.ratio ?? 1),
                                          constant: 0).isActive = true
    }
}
// MARK: - Extensions -

extension StoryDetailViewController: StoryDetailViewInterface {
    func didChangedBookmarked() {
        bookMarkButton.tintColor = presenter.storyViewModel.isBookmarked ? .red : .blue
    }
}
